// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/*
 * -----------------------------------------------------------------------------
 * Modelo para el Servidor (Guild)
 * -----------------------------------------------------------------------------
*/
model Guild {
  id        String   @id
  name      String
  prefix    String   @default("!")

  // Relaciones
  alliances         Alliance[]
  partnerStats      PartnershipStats[]

  // ‚úÖ CAMBIO: Ahora un Guild puede tener M√öLTIPLES configuraciones de embed.
  embedConfigs      EmbedConfig[]
  BlockV2Config     BlockV2Config[]
  // ‚úÖ NUEVAS RELACIONES
  allianceChannels  AllianceChannel[]
  pointsHistory     PointHistory[]
}
/*
 * -----------------------------------------------------------------------------
 * Modelo para el Usuario
 * -----------------------------------------------------------------------------
 * Representa a un usuario de Discord de manera global.
*/
model User {
  id                 String @id

  // Relaciones
  partnerStats       PartnershipStats[]
  createdAlliances   Alliance[]
  // ‚úÖ NUEVA RELACI√ìN
  pointsHistory      PointHistory[]
}

/*
 * -----------------------------------------------------------------------------
 * Modelo para las Estad√≠sticas de Alianza (Leaderboard)
 * -----------------------------------------------------------------------------
 * Almacena los puntos de un usuario EN UN SERVIDOR espec√≠fico.
 * Se gana 1 punto por mensaje en los canales registrados.
*/
model PartnershipStats {
  // Puntos acumulados totales.
  totalPoints     Int      @default(0)

  // Puntos para la tabla de clasificaci√≥n semanal.
  weeklyPoints    Int      @default(0)

  // Puntos para la tabla de clasificaci√≥n mensual.
  monthlyPoints   Int      @default(0)

  // Fecha del √∫ltimo reinicio para controlar los contadores.
  lastWeeklyReset DateTime @default(now())
  lastMonthlyReset DateTime @default(now())

  // --- Relaciones y Clave Primaria ---
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  guild           Guild    @relation(fields: [guildId], references: [id])
  guildId         String

  // Un usuario solo puede tener un registro de estad√≠sticas por servidor.
  @@id([userId, guildId])
}

/*
 * -----------------------------------------------------------------------------
 * Modelo para la Alianza (El mensaje publicado)
 * -----------------------------------------------------------------------------
 * Guarda la referencia al mensaje de alianza, pero no su contenido.
 * El contenido se construye din√°micamente usando EmbedConfig y PartnershipStats.
*/
model Alliance {
  id          String   @id @default(cuid())
  channelId   String
  messageId   String   @unique
  createdAt   DateTime @default(now())

  // --- Relaciones ---
  guild       Guild    @relation(fields: [guildId], references: [id])
  guildId     String
  creator     User     @relation(fields: [creatorId], references: [id])
  creatorId   String
}


/*
 * -----------------------------------------------------------------------------
 * Modelo para Canales de Alianza
 * -----------------------------------------------------------------------------
 * Gestiona qu√© canales est√°n configurados para otorgar puntos y qu√© bloque enviar
*/
model AllianceChannel {
  id              String   @id @default(cuid())
  channelId       String   @unique // ID del canal de Discord

  // Configuraci√≥n del canal
  blockConfigName String   // Nombre del BlockV2Config a enviar
  isActive        Boolean  @default(true)

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // --- Relaciones ---
  guild           Guild    @relation(fields: [guildId], references: [id])
  guildId         String

  // Historial de puntos otorgados en este canal
  pointsHistory   PointHistory[]

  // Un canal solo puede estar en un servidor
  @@unique([guildId, channelId])
}

/*
 * -----------------------------------------------------------------------------
 * Modelo para Historial de Puntos
 * -----------------------------------------------------------------------------
 * Registra cada vez que un usuario gana puntos con fecha y hora
*/
model PointHistory {
  id              String   @id @default(cuid())

  // Informaci√≥n del punto otorgado
  points          Int      @default(1)
  timestamp       DateTime @default(now())
  messageId       String   // ID del mensaje que gener√≥ el punto

  // --- Relaciones ---
  user            User     @relation(fields: [userId], references: [id])
  userId          String

  guild           Guild    @relation(fields: [guildId], references: [id])
  guildId         String

  allianceChannel AllianceChannel @relation(fields: [channelId], references: [id])
  channelId       String
}


/*
 * -----------------------------------------------------------------------------
 * Modelo para la Configuraci√≥n del Embed
 * -----------------------------------------------------------------------------
*/
model EmbedConfig {
  id              String  @id @default(cuid())

  // ‚úÖ NUEVO: Un nombre √∫nico para identificar este embed dentro del servidor.
  // Ejemplos: "alianza", "bienvenida", "reglas"
  name            String

  // Campos del Embed (t√≠tulo, descripci√≥n, color, etc.)
  color           String?
  title           String?
  url             String?
  authorName      String?
  authorIconURL   String?
  authorURL       String?
  description     String?
  thumbnailURL    String?
  imageURL        String?
  footerText      String?
  footerIconURL   String?
  fields          String? @default("[]")

  // --- Relaci√≥n ---
  guild           Guild    @relation(fields: [guildId], references: [id])

  // ‚úÖ CAMBIO: Quitamos '@unique' para permitir que un guildId aparezca m√∫ltiples veces.
  guildId         String

  // ‚úÖ NUEVO: Asegura que el 'name' sea √∫nico por cada servidor.
  // No puedes tener dos embeds llamados "alianza" en el mismo servidor.
  @@unique([guildId, name])
}

/*
 * -----------------------------------------------------------------------------
 * Modelo para la Configuraci√≥n de Bloques V2
 * -----------------------------------------------------------------------------
*/
model BlockV2Config {
  id        String   @id @default(cuid())

  // ‚úÖ Nombre √∫nico dentro de cada servidor
  name      String

  // Configuraci√≥n en JSON (embed + componentes, botones, etc.)
  config    Json


  // Relaci√≥n con el servidor
  guild     Guild    @relation(fields: [guildId], references: [id])
  guildId   String

  // üîí Asegura que un nombre no se repita dentro del mismo servidor
  @@unique([guildId, name])
}
